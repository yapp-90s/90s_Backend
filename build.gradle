buildscript {
    ext {
        springBootVersion = '2.3.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('org.asciidoctor:asciidoctor-gradle-plugin:1.5.10')

    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.10"
    id 'org.hidetake.ssh' version '2.9.0'
    id 'com.google.cloud.tools.jib' version '2.7.1'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.yapp.ios2'
version = '2.0.1-SNAPSHOT'
description = '90s'
sourceCompatibility = 15

ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor {
    inputs.dir snippetsDir
//    dependsOn test
    setBackend("")
//    outputDir './src/main/resources/static/docs'
    doLast{
        copy {
            from "${asciidoctor.outputDir}/html5"
            into './src/main/resources/static/docs'
        }
    }
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

//jib Setting
jib {
    from {
        image = 'openjdk:15'
    }
    to {
        image = 'radiata03/90s'
        tags = ["${project.version}".toString()]
    }
    container {
        ports = ['8080']
        volumes = ["/tmp", "/logs"]
    }
}


task docker90sServerRun{
    dependsOn asciidoctor, jibBuildTar

    doLast{
        ssh.run {
            session(remotes.deploy) {
                def command
                def imageName = "${project.properties['imageName']}:latest"
                def containerName = '90s_test'
                def host = project.properties['dockerHost']
                def buildPath = fileTree(dir: 'build').getDir()
                def tarName = "jib-image.tar"
                def inPort = "8080"
                def outPort = "8080"
                def routePort = "9999"
                def from = "${buildPath}/${tarName}"
                def to = project.properties["dockerDir"]


//                command = "ls ${to}"
//                println "\n\$ ${command}"
//                execute(command){r->println r}

                command = "rm ${to}${tarName}"
                println "\n\$ ${command}"
                execute(command, ignoreError:true){r->println r}

                println "\n\$ put from:${from}, into: ${to}"
                put from: from, into: to

                command = 'ls'
                println "\n\$ ${command}"
                execute(command){r->println r}

                command = "docker stop ${containerName}"
                println "\n\$ ${command}"
                execute(command, ignoreError:true){r->println r}

                command = "docker rm ${containerName}"
                println "\n\$ ${command}"
                execute command, ignoreError:true

//                command = "docker rmi \$(docker images | grep ${imageName})"
//                println "\n\$ ${command}"
//                execute command, ignoreError:true

                command = "docker load --input ${to}${tarName}"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker images"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker run -d --name=${containerName} -p ${inPort}:${outPort} -v /tmp/log:/logs --network 90s_network ${imageName}"
//                docker run --name 90s_sub -p 8081:8080 -v /tmp/log:/logs --link mysql-docker radiata03/90s:2.0.1
                println "\n\$ ${command}"
                execute command, ignoreError:true

                command = "docker ps"
                println "\n\$ ${command}"
                execute command, ignoreError:true

                println('\n도커 업로드 완료')
            }
        }
    }
}


remotes {
    deploy {
        role '90s server'
        host = project.properties['dockerHost']
        port = project.properties['dockerPort'].toInteger()
        user = project.properties['dockerUser']
        password = project.properties['dockerPassword']
        knownHosts = allowAnyHosts
    }
}


repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.2.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc:2.2.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.2.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.2.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.2.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-configuration-processor:2.2.5.RELEASE'
    implementation 'org.projectlombok:lombok:1.18.8'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    implementation 'com.amazonaws:aws-java-sdk:1.11.753'
    implementation 'com.amazonaws:aws-java-sdk-core:1.11.753'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.753'
    implementation 'com.amazonaws:aws-java-sdk-sns:1.11.763'
    implementation 'com.twilio.sdk:twilio:7.49.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.3'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.3'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.10.3'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.security:spring-security-test:5.2.2.RELEASE'
    runtimeOnly 'org.springframework.boot:spring-boot-devtools:2.2.5.RELEASE'
    runtimeOnly 'mysql:mysql-connector-java:8.0.19'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}
